#! /usr/bin/env python3

import django

if __name__ == "__main__":
    django.setup()

from django.db import transaction

from base.helpers.exceptions import DryRunException
from organization.models.season import Season

SEASONS = [
    (1996,'1996-04-06','1996-09-22','1996-09-24','1996-10-20'),
    (1997,'1997-03-22','1997-09-28','1997-10-04','1997-10-26'),
    (1998,'1998-03-15','1998-09-27','1998-09-30','1998-10-25'),
    (1999,'1999-03-20','1999-10-10','1999-10-16','1999-11-21'),
    (2000,'2000-03-18','2000-09-09','2000-09-14','2000-10-15'),
    (2001,'2001-04-07','2001-09-09','2001-09-20','2001-10-21'),
    (2002,'2002-03-23','2002-09-22','2002-09-25','2002-10-20'),
    (2003,'2003-04-05','2003-10-26','2003-11-01','2003-11-23'),
    (2004,'2004-04-03','2004-10-17','2004-10-22','2004-11-14'),
    (2005,'2005-04-02','2005-10-16','2005-10-21','2005-11-13'),
    (2006,'2006-04-01','2006-10-15','2006-10-21','2006-11-12'),
    (2007,'2007-04-07','2007-10-21','2007-10-25','2007-11-18'),
    (2008,'2008-03-29','2008-10-26','2008-10-30','2008-11-23'),
    (2009,'2009-03-19','2009-10-25','2009-10-29','2009-11-22'),
    (2010,'2010-03-25','2010-10-24','2010-10-28','2010-11-21'),
    (2011,'2011-03-15','2011-10-23','2011-10-26','2011-11-20'),
    (2012,'2012-03-10','2012-10-28','2012-10-31','2012-12-01'),
    (2013,'2013-03-02','2013-10-27','2013-10-30','2013-12-07'),
    (2014,'2014-03-08','2014-10-26','2014-10-29','2014-12-07'),
    (2015,'2015-03-06','2015-10-25','2015-10-28','2015-12-06'),
    (2016,'2016-03-06','2016-10-23','2016-10-26','2016-12-10'),
    (2017,'2017-03-03','2017-10-22','2017-10-25','2017-12-09'),
    (2018,'2018-03-03','2018-10-28','2018-10-31','2018-12-08'),
    (2019,'2019-03-02','2019-10-06','2019-10-19','2019-11-10')
]


def main(args):
    for season in SEASONS:
        created_season = Season.objects.create(
            season=season[0],
            date_begin=season[1],
            date_end_reg=season[2],
            date_begin_playoffs=season[3],
            date_end_playoffs=season[4]
        )
        print(created_season.id)


if __name__ == '__main__':
    
    import argparse

    parser = argparse.ArgumentParser(
        description="A script to backfill MLS seasons based on Jay's SQL dump."
    )

    parser.add_argument('--commit', required=False, action='store_true')

    args = parser.parse_args()

    with transaction.atomic():
        main(args)
        if not args.commit:
            raise DryRunException()
